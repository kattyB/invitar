= Geocoder

Geocoder is a complete geocoding solution for Ruby. With Rails it adds object geocoding (by street or IP address), reverse geocoding (find street address based on given coordinates), and distance calculations to Ruby on Rails. It's as simple as calling +geocode+ on your objects, and then using a scope like <tt>Venue.near("Billings, MT")</tt>. Since it does not rely on proprietary database functions finding geocoded objects in a given area works with out-of-the-box PostgreSQL, MySQL, and even SQLite.


== Compatibility

Geocoder has been successfully tested with Ruby (MRI) 1.8.7, 1.9.2, and JRuby 1.5.3.

Geocoder is compatible with Rails 3. If you need to use it with Rails 2 please see the <tt>rails2</tt> branch (no longer maintained, limited feature set).


== Install

=== As a Gem

Add to your Gemfile:

  gem "geocoder"

and run at the command prompt:

  bundle install

=== Or As a Plugin

At the command prompt:

  rails plugin install git://github.com/alexreisner/geocoder.git


== Configure Object Geocoding

=== Required Attributes

Your object must have two attributes (database columns) for storing latitude and longitude coordinates. By default they should be called +latitude+ and +longitude+ but this can be changed (see "More on Configuration" below):

  rails generate migration AddLatitudeAndLongitudeToModel latitude:float longitude:float
  rake db:migrate

For reverse geocoding your model must provide a method that returns an address. This can be a single attribute, but it can also be a method that returns a string assembled from different attributes (eg: +city+, +state+, and +country+).

=== Model Behavior

In your model, tell Geocoder which method returns your object's full address:

  geocoded_by :full_street_address   # can also be an IP address
  after_validation :geocode          # auto-fetch coordinates

For reverse geocoding, tell Geocoder which methods return latitude and longitude:

  reverse_geocoded_by :lat, :lon
  after_validation :reverse_geocode  # auto-fetch address

If you have just added geocoding to a class and have a lot of existing objects you can use this Rake task to geocode them all:

  rake geocode:all CLASS=YourModel


== Location-Aware Database Queries

To find objects by location, use the following scopes:

  Venue.near('Omaha, NE, US', 20)    # venues within 20 miles of Omaha
  Venue.near([40.71, 100.23], 20)    # venues within 20 miles of a point
  Venue.geocoded                     # venues with coordinates
  Venue.not_geocoded                 # venues without coordinates

With geocoded objects you can do things like this:

  obj.nearbys(30)                    # other objects within 30 miles
  obj.distance_to(40.714, -100.234)  # distance from object to arbitrary point

Some utility methods are also available:

  # look up coordinates of some location (like searching Google Maps)
  Geocoder.coordinates("25 Main St, Cooperstown, NY")
   => [42.700149, -74.922767]

  # distance (in miles) between Eiffel Tower and Empire State Building
  Geocoder::Calculations.distance_between( 47.858205,2.294359,  40.748433,-73.985655 )
   => 3619.77359999382

  # find the geographic center (aka center of gravity) of objects or points
  Geocoder::Calculations.geographic_center([ city1, city2, city3, [40.22,-73.99], city4 ])
   => [35.14968, -90.048929]

Please see the code for more methods and detailed information about arguments (eg, working with kilometers).


== More on Configuration

You are not stuck with using the +latitude+ and +longitude+ database column names for storing coordinates. For example, to use +lat+ and +lon+:

  geocoded_by :address, :latitude  => :lat, :longitude => :lon

The +address+ method can return any string you'd use to search Google Maps. For example, any of the following are acceptable:

* "714 Green St, Big Town, MO"
* "Eiffel Tower, Paris, FR"
* "Paris, TX, US"

If your model has +street+, +city+, +state+, and +country+ attributes you might do something like this:

  geocoded_by :address

  def address
    [street, city, state, country].compact.join(', ')
  end

For reverse geocoding you can also specify an alternate name attribute where the address will be stored, for example:

  reverse_geocoded_by :lat, :lon, :address => :location


== Advanced Geocoding

So far we have looked at shortcuts for assigning geocoding results to object attributes. However, if you need to do something fancy you can skip the auto-assignment by providing a block (takes the object to be geocoded and a <tt>Geocoder::Result</tt> object) in which you handle the parsed geocoding result any way you like, for example:

  reverse_geocoded_by :lat, :lon do |obj,geo|
    obj.city    = geo.city
    obj.zipcode = geo.postal_code
    obj.country = geo.country_code
  end
  after_validation :reverse_geocode

Every <tt>Geocoder::Result</tt> object, +result+, provides the following data:

* <tt>result.latitude     # float</tt>
* <tt>result.longitude    # float</tt>
* <tt>result.coordinates  # array of the above two</tt>
* <tt>result.address      # string</tt>
* <tt>result.city         # string</tt>
* <tt>result.postal_code  # string</tt>
* <tt>result.country_name # string</tt>
* <tt>result.country_code # string</tt>

and if you're familiar with the results returned by the geocoding service you're using, you can access even more (see code comments for details: <tt>lib/geocoder/results/*</tt>).


== Geocoding Services

By default Geocoder uses Google's geocoding API to fetch coordinates and addresses. However if you wish to use Yahoo's geocoding API you can simply add this to an initializer:

  # config/initializers/geocoder.rb
  Geocoder::Configuration.lookup = :yahoo
  Geocoder::Configuration.yahoo_appid = "..."

To obtain a Yahoo app id go to:

https://developer.apps.yahoo.com/wsregapp

Note that the result objects returned by different geocoding services all implement the methods listed above. Beyond that, however, you must be familiar with your particular subclass of <tt>Geocoder::Result</tt> and the geocoding service's result structure:

Google: http://code.google.com/apis/maps/documentation/geocoding/#JSON

Yahoo: http://developer.yahoo.com/geo/placefinder/guide/responses.html

FreeGeoIP: http://github.com/fiorix/freegeoip/blob/master/README.rst

=== Timeouts

You can set the timeout used for connections to the geocoding service. The default is 3 seconds but if you want to set it to 5, for example, put the following in an initializer:

  # config/initializers/geocoder.rb
  Geocoder::Configuration.timeout = 5


== Forward and Reverse Geocoding in the Same Model

If you apply both forward and reverse geocoding functionality to the same model, you will provide two address methods:

* one for storing the fetched address (reverse geocoding)
* one for providing an address to use when fetching coordinates (forward geocoding)

For example:

  class Venue

    # build an address from street, city, and state attributes
    geocoded_by :address_from_components

    # store the fetched address in the full_address attribute
    reverse_geocoded_by :latitude, :longitude, :address => :full_address
  end

However, there can be only one set of latitude/longitude attributes, and whichever you specify last will be used. For example:

  class Venue

    geocoded_by :address,
      :latitude  => :fetched_latitude,  # this will be overridden by the below
      :longitude => :fetched_longitude  # same here

    reverse_geocoded_by :latitude, :longitude
  end

The reason for this is that we don't want ambiguity when doing distance calculations. We need a single, authoritative source for coordinates!


== Request Geocoding by IP Address

Geocoder adds a +location+ method to the standard <tt>Rack::Request</tt> object so you can easily look up the location of any HTTP request by IP address. For example, in a Rails controller or a Sinatra app:

  # returns Geocoder::Result object
  result = request.location


== Use Outside of Rails

You can use Geocoder outside of Rails by calling the <tt>Geocoder.search</tt> method:

  result = Geocoder.search("McCarren Park, Brooklyn, NY")

This returns a <tt>Geocoder::Result</tt> object with all information provided by the geocoding service. Please see above and in the code for details.


== Distance Queries in SQLite

SQLite's lack of trigonometric functions requires an alternate implementation of the +near+ scope. When using SQLite, Geocoder will automatically use a less accurate algorithm for finding objects near a given point. Results of this algorithm should not be trusted too much as it will return objects that are outside the given radius.

It is also not possible to calculate distances between points without the trig functions so you cannot sort results by "nearness."


=== Discussion

There are few options for finding objects near a given point in SQLite without installing extensions:

1. Use a square instead of a circle for finding nearby points. For example, if you want to find points near 40.71, 100.23, search for objects with latitude between 39.71 and 41.71 and longitude between 99.23 and 101.23. One degree of latitude or longitude is at most 69 miles so divide your radius (in miles) by 69.0 to get the amount to add and subtract from your center coordinates to get the upper and lower bounds. The results will not be very accurate (you'll get points outside the desired radius--at worst 29% farther away), but you will get all the points within the required radius.

2. Load all objects into memory and compute distances between them using the <tt>Geocoder::Calculations.distance_between</tt> method. This will produce accurate results but will be very slow (and use a lot of memory) if you have a lot of objects in your database.

3. If you have a large number of objects (so you can't use approach #2) and you need accurate results (better than approach #1 will give), you can use a combination of the two. Get all the objects within a square around your center point, and then eliminate the ones that are too far away using <tt>Geocoder::Calculations.distance_between</tt>.

Because Geocoder needs to provide this functionality as a scope, we must go with option #1, but feel free to implement #2 or #3 if you need more accuracy.


== Known Issue

You cannot use the +near+ scope with another scope that provides an +includes+ option because the +SELECT+ clause generated by +near+ will overwrite it (or vice versa). Instead, try using +joins+ and pass a <tt>:select</tt> option to the +near+ scope to get the columns you want. For example, in Rails 2 syntax:

  # instead of :includes => :venues:
  City.near("Omaha, NE", 20, :select => "venues.*").all(:joins => :venues)

If anyone has a more elegant solution to this problem I am very interested in seeing it.


== To-do List

* add support for DataMapper
* add support for Mongoid
* make 'near' scope work with AR associations
  * http://stackoverflow.com/questions/3266358/geocoder-rails-plugin-near-search-problem-with-activerecord


Copyright (c) 2009-11 Alex Reisner, released under the MIT license
